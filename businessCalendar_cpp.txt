/* -*- mode: c++; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- */

/*
 Copyright (C) 2000, 2001, 2002, 2003 RiskMap srl
 Copyright (C) 2003, 2004, 2005, 2006, 2007 StatPro Italia srl
 Copyright (C) 2004 Jeff Yu

 This file is part of QuantLib, a free-software/open-source library
 for financial quantitative analysts and developers - http://quantlib.org/

 QuantLib is free software: you can redistribute it and/or modify it
 under the terms of the QuantLib license.  You should have received a
 copy of the license along with this program; if not, please email
 <quantlib-dev@lists.sf.net>. The license is also available online at
 <http://quantlib.org/license.shtml>.

 This program is distributed in the hope that it will be useful, but WITHOUT
 ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 FOR A PARTICULAR PURPOSE.  See the license for more details.
*/

#include <ql/time/businesscalendar.hpp>
#include <iostream>
#include <fstream>
#include <string>

namespace QuantLib {

	//Constructor for BusImpl boost::shared_ptr
	BusinessCalendar::BusImpl::BusImpl(const std::string& name)
    : name_(name) {}

	//Returns the name of the BusImpl, which is equal to "market" in the BusinessCalendar constructor
	std::string BusinessCalendar::BusImpl::name() const {
        return name_;
    }

	//Returns false if Date is a weekend date or is in the "addedHolidays" set. isWeekend(Date) is defined
	//in the Impl class, a parent of BusImpl.
	bool BusinessCalendar::BusImpl::isBusinessDay(const Date& date) const {
		bool test;
		Weekday w = date.weekday();
		if (isWeekend(w) || addedHolidays.find(date) != addedHolidays.end()) {
			test = false;
		}
		else {
			test = true;
		}
		return test; 

	}

	//Business Calendar constructor, takes two string arguments:
	//	"holidayfile"	-	.csv file with holiday dates
	//	"market"		-	name of the market to get holiday dates
    BusinessCalendar::BusinessCalendar(std::string holidayfile, std::string market) {
        // all calendar instances with the same "market" share the same implementation instance
		busImpl_ = boost::shared_ptr<BusinessCalendar::BusImpl>(
                                             new BusinessCalendar::BusImpl(market));

        impl_ = busImpl_;
		
		// ************* Begin reading file given by "holidayfile" **********
		
		//Define string variables to parse lines in file
		std::string line;
		std::string mkt;
		std::string date;
		
		//Open an ifstream with "holidayfile", begin reading
		std::ifstream myfile(holidayfile);
		if (myfile.is_open())
		{
			//Get each line of the file
			while(std::getline(myfile, line)) {
				
				//Parse each line into "mkt" and "date"
				std::stringstream ss(line);
				std::getline(ss, mkt, ',');
				std::getline(ss, date, ',');
				
				//If "mkt" is equal to the "market" defined by the constructor, add date to the "BusImpl->addedHoliday" set
				if (mkt == market){
					int y, m, d;
					
					//Parse "date" into year, month, day and re-combine into QuantLib::Date variable
					std::istringstream(date.substr(0,4)) >> y;
					std::istringstream(date.substr(4,2)) >> m;
					std::istringstream(date.substr(6,2)) >> d;
					Date holidayDate((Day)d, (Month)m, (Year) y);
					
					busImpl_->addedHolidays.insert(holidayDate);
				}
			}
			
			myfile.close();
		}

    }
}
